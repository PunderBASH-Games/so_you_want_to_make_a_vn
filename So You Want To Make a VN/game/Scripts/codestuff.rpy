label code_know:
    p "I have good news for you - you don't need to know any code at all to start making a simple Ren'py game!"
    p "The bad news, however, is that you will need to learn at least the basic functions to have a working script."
    p "Don't panic though, there's more than a few people who have started without ever having touched a piece of code before and gone on to make complete games! It's more than possible, and with the Ren'py community you don't need to struggle to figure things out alone."
    p "It is going to be easier if you already know some code, particularly Python as this is what Ren'py is based on, but it isn't essential to learn Python and you'll find that Ren'py uses a simplified version to streamline the VN making process."
    p "For reference, the Ren'py 7.x versions use Python 2, whereas the newer Ren'py 8.x uses Python 3. Unless you have a good reason to stick to the older Python 2, it's strongly recommended to use Ren'py 8.x for your new projects and keep it updated with any main update releases."
    p "There will be a lot of things in the game files when you create your first project that are already done for you, so you shouldn't need to change that unless you really want to."
    p "These files are named gui.rpy, options.rpy, and screens.rpy."
    p "Each file will have \"note\" lines which will usually be in a different colour in your code editor and start with one or more # symbols."
    p "You can do this in your own project, add in lines beginning with # to make notes in your own project. This could be to describe what something does, to mark other places the information is referenced, or even leave markers for things you want to add later."
    p "Gui.rpy will have the code for the basic user interface, as well as things like default text colours and sizes. You can change simple things in here like text colours, but for bigger changes it's best to read up on what you want to do and even try in an empty project before making the changes in your main game."
    p "Options.rpy is a much smaller file, but it contains things like the name of your game builds and the default save names. There's also space to add in an \"About\" section, where you can give players details about your game, licences, and assets used."
    p "Finally, screens.rpy contains a lot of the configurations and finer code details for your project. Everything from how the main menu is displayed, to essentially all the nuts and bolts of how the game will process your script files. Again, you can change things in here, but I would strongly recommend not doing so unless you know what you're changing and why."
    p "You may notice I've missed out one last file from your new game setup, \"script.rpy\". This will only contain a little bit of code which you will be changing. You can, if you like, keep all of your dialogue and game in the script.rpy file, but unless it is very short this isn't recommended."
    p "Instead, you can create any number of new files you need to break up your \"script\" into manageable and sensible sections. As long as you use the correct \"label\" and \"jump\" (or even \"call\" and \"return\" for some scenarios) the game will automatically know to move between the files."
    p "When you hit \"Build Distributions\" (as described in the Finishing Touches section), Ren'py will compile all of your game and script files for you."
    p "You can even make new folders inside the existing ones to keep your assets and code organised, so you might have a folder named Sprites and one named Backgrounds inside the default \"images\" folder to keep those separate for your own records when creating the game."
    p "It is recommended not to change any of the default Folder names, but you can add subfolders to help keep your work easy to view and edit while you're making it."
    # You'll notice a bit of this in here, I like to keep characters and definitions in their own files under the folder "Config", and script files go in a "Scripts" folder to keep them neat and tidy too. I broke down the scripts into the topic headers too, so it is much easier to edit when I inevitably find a bunch of typos when I playtest this later.
    p "How you organise files and folders is up to you, as is what you name them. There are a few file and folder names that the game engine will not accept, as these are reserved for the \"under the hood\" workings of Ren'py, but this is all covered in the official Ren'py docs and some of the linked code tutorials in the Resources section."
    p "What's important is keeping things consistent and organised in a way you understand."
    p "This also applies to the \"labels\" you will be using in your game, and any \"variables\" you create. It may be tempting to shorten them down to a series of letters and numbers, but it is better if you know at a glance what they refer to and why."
    p "But those things, and any more detailed code, is much better explained by the experts in the linked tutorials."
    p "If you get stuck, however, the Discord community are a great resource to find help and support with your code and how to make the most of Ren'py."
    p "The last thing I will mention for the code basics is this - you will make errors. It happens. A lot. A big part of learning early on is learning what the error screens mean and how to fix those issues yourself." 
    p "It's fine to ask for help, but when you do it's better to learn why something went wrong and how to fix similar things in the future rather than only taking a copy and paste fix for the problem segment."
    p "I promise you it does get easier the more you do it! The one behind the keyboard right now started off knowing {i}nothing{/i} about Ren'py or code, but now is fairly confident in how to fix most of the things she breaks. It's usually a wrong indent or missing : somewhere, very easy mistakes to make and even easier to fix when you recognise the error screen!"
    p "So with that in mind, let's move along, shall we?"
    jump code_menu

label code_extra:
    p "So you want to add something more fancy or do a bit more than the basics with Ren'py?"
    p "As mentioned elsewhere, Ren'py runs on Python code language, so it could be helpful for you to learn a bit of the basics of pure Python itself. Ren'py 7.x uses Python 2, and Ren'py 8.x uses Python 3, so you may need to check up on what you're learning in case it isn't relevant for your verion."
    p "You can do a lot of fancy things with Ren'py and Python, from small changes to a default game to big and elaborate screens and minigames."
    p "I would say the limit is your imagination, but at some point it is worth stepping back and remembering Ren'py is designed for Visual Novels. So whilst you {i}could{/i} push it to making an RPG adventure, this would be working against the system rather than with it, and there may well be other engines more suited to making an RPG."
    p "Still, there is a lot you can do, and the system has been used in extraordinarily creative ways by various developers. Those extra features could enhance your game and give it a unique quality to draw people in."
    p "Before you go rushing to make your own complicated piece of code, it's probably wise to visit the Lemmasoft Forums and take a look through the {b}{a=https://lemmasoft.renai.us/forums/viewforum.php?f=51&sid=0d023984a57bb1380e97b7c98c78fbba}Ren'py Cookbook{/a}{/b} section - some generous and talented people have created pieces of code and many allow other people to use and/or modify them in their own projects."
    p "As with all other assets, make sure you have permission before using someone else's code pieces, but you may find something that saves time, or you could even work out a more efficient way to do the same thing and share it on!"
    p "It's also worthwhile looking at questions and answers from other developers in the community as a learning resource."
    p "You may also find that there are times you can get a feature to work, but someone else might know a much more efficient way for you to achieve the same result. It can be worth learning those tips and tricks from the experts, it could save you some time in the future with similar things."
    p "There's not much more I can tell you here on this topic, but there are a lot of great resources and wonderful people to learn from within the community and in other places online."
    p "So without further ado, let's head on, shall we?"
    jump code_menu

label code_learn:
    p "So you're ready to learn? That's fantastic!"
    p "The main documentation for Ren'py can be found {b}{a=https://www.renpy.org/doc/html/}here{/a}{/b}, although many people who haven't used code before might find this a bit heavy and difficult to understand at first. It uses a lot of technical terms, and may not be laid out in a way that's useful for you to learn from."
    p "But fear not, that's not the only source of information on Ren'py and how to use it!"
    p "There are lots of resources you can find online, but I would like to direct your attention to 2 sites in particular that each take a different learning approach and cover different topics."
    p "First off is {b}{a=https://www.lezcave.com/renpy-tutorials/}LezCave.com{/a}{/b} which is an ideal place for the absolute beginner to start learning, as well as a resource for more experienced users to pick up new tricks or look into more complex topics like screen language and using pure Python in your game."
    p "LezCave is run by a Ren'py veteran and will explain all the terms and topics in easy to follow parts. Each topic will also include samples of the code being used which you can copy and paste into your own empty project to see it working within a game as a demonstration."
    p "This can be very useful when you're starting out, and is a handy visual guide to what each thing does. You'll find the code there will also come with plenty of # notes in the code so you will know exactly what each line is doing and why."
    p "The site is also added to over time with new topics and details, and there is an attached Discord server with areas to ask questions and talk to other developers. You might even find the PunderBash Team lurking there from time to time!"
    p "The second main site I'd like to mention to you is {b}{a=https://feniksdev.com/}FeniksDev.com{/a}{/b} which has a different approach to learning. There are Tutorials, Resources, a Glossary of code terms, and even quizzes to test what you've learned along the way!"
    p "Fen is another veteran of Ren'py and a frequent problem solver in the Ren'py Discord community, there's a lot they can teach you about using Ren'py to its potential and handy tips and tricks to streamline your code."
    p "Be sure to give your thanks to these generous developers if you encounter them or find their websites useful!"
    p "I'll leave the rest of the teaching to their capable...hands? Screens? Either way, let's away!"
    jump code_menu